%% -*- erlang -*-
% [{kernel, [
%     {logger_level, error},
%     % {logger_sasl_compatible, true},
%     {logger,
%       [{handler,
%         node_notice_logger,
%         logger_std_h,
%         % #{level => debug,
%         #{id => node_notice_logger,
%           level => notice,
%           formatter => {logger_formatter,
%             #{single_line => true}},
%             #{config =>  #{type => standard_io}}}
%          }}
% ]},logger:log(notice, "this is a notice ~n").
% {kernel,
%   {logger_level, error},
%   % {filters}
%   {logger_sasl_compatible, false},
%   [{logger,
%     [{handler, default, logger_std_h,
%       #{level => error,
%       formatter => {logger_formatter, #{single_line => true}}}},
%     {handler, node_notice_logger, logger_std_h,
%       #{id => node_notice_logger,
%       level => error,
%       formatter => {logger_formatter,
%                         #{template => [time," ",pid," ",msg,"\n"]}},
%       config =>  #{type => standard_io}}}
%     ]}
% ]},
% ]},
       % {handler,
       %   node_debug_logger,
       %   logger_std_h,
       %   #{id => node_notice_logger,
       %      level => debug,
       %      formatter => {logger_formatter, #{single_line => true}}
       %    }}


[{kernel,
 {logger_level, error},
 {logger_sasl_compatible, false},
 [{handler, default, undefined}]},

{node, [
    {primary_workers, [
        % pinger_worker,
        node_utils_server
        % node_storage_server
    ]},
    {distributed_workers, [
        generic_tasks_server,
        generic_tasks_worker,
        % sensor_server_worker,
        node_stream_worker,
        node_benchmark_server
    ]},
    {node_sensor_server_worker_measurements, [temp]},
    {timed_apps, [lasp]},
    {generic_tasks_sets_names, [tasks]},
    {data_crdts_names, [{temp, dont_flush_crdt}]},
    {generic_tasks_restart_interval, 5000},
    {gc_interval, 60000},
    {emulate_als, true},
    {als_stream_interval, 1000},
    {als_propagation_treshold, 10},
    {temp_stream_interval, 30000},
    % {evaluation_mode, grisplasp},
    {evaluation_mode, mapreduce},
    % Hosts used in env variables must be declared
    % beforehand using erl_inetrc config file
    {remote_hosts,
        % #{webservers => ['nodews@Laymer'],
        #{webservers => [],
          aws_servers => [],
          main_aws_server => [
            % 'server1@ec2-18-185-18-147.eu-central-1.compute.amazonaws.com',
            % 'server2@ec2-18-130-232-107.eu-west-2.compute.amazonaws.com',
            % 'server3@ec2-35-180-138-155.eu-west-3.compute.amazonaws.com'
          ]}
    },
    {data_dir, "data"},
    {time_multiplier,   5},
    {logger,
      [{handler, node_notice_logger, logger_std_h,
        #{id => node_notice_logger,
        level => error,
        formatter => {logger_formatter,
                          #{template => [time," ",pid," ",msg,"\n"]}},
        config =>  #{type => standard_io}}}
    ]}
]},

% {lager, [
%   {handlers, [
%     {lager_console_backend, [{level, notice}]}
%     % {lager_console_backend, [{level, error}]}
%   ]}
% ]},

% {logger, [
%     #{level => notice,
%     formatter => {logger_formatter, #{single_line => true}}}
% ]},
% {os_mon, [
%   {start_os_sup, true},
%   {start_cpu_sup, true},
%   {start_disk_sup, false}
% ]},
%
% {kernel, [
%     {logger_level, notice},
%     {logger, [{handler,
%       default,
%       logger_std_h,
%       % #{level => error,
%       % #{level => notice,
%       #{level => notice,
%       formatter => {logger_formatter, #{single_line => true}}}
%    }]}
% ]},


{lasp, [{membership, false},
        {storage_backend, lasp_ets_storage_backend},
        % {mode, state_based},
        {mode, delta_based},
        % see https://github.com/lasp-lang/lasp/commit/a9422207e554e47495c7c488450a238274844eb9
        {propagate_on_update, true},
        {plumtree_peer_refresh_interval, 1000},
        {state_sync_interval, 1000},
        {delta_interval, 1000}]},

{plumtree, [{broadcast_exchange_timer, 300},
           {broadcast_mods, [lasp_plumtree_backend]}]},

{partisan, [{partisan_peer_service_manager,
            partisan_hyparview_peer_service_manager},
            {channels, [1,2,3]}
]},

{grisp, [{drivers, [
                {spi, grisp_spi_drv_emu},
                {gpio, grisp_gpio_drv_emu},
                {i2c, grisp_i2c_drv_emu}
            ]},
        {devices, [
            % {gpio1, pmod_amp2},
            % {uart, pmod_maxsonar},
            % {spi1, pmod_gyro},
            % {spi1, pmod_nav},
            % {spi2, pmod_als}
        ]}
    ]}
].
