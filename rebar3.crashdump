error: {badmatch,false}
[{rebar3_elixir_compile_util,get_details,1,
                             [{file,"/Users/Laymer/EdgeComputing/grisp-lasp/node/_build/default/plugins/rebar3_elixir_compile/src/rebar3_elixir_compile_util.erl"},
                              {line,73}]},
 {rebar3_elixir_compile,init,1,
                        [{file,"/Users/Laymer/EdgeComputing/grisp-lasp/node/_build/default/plugins/rebar3_elixir_compile/src/rebar3_elixir_compile.erl"},
                         {line,8}]},
 {rebar_state,'-create_logic_providers/2-fun-0-',2,
              [{file,"/Users/Laymer/bin/rebar3/_build/prod/lib/rebar/src/rebar_state.erl"},
               {line,412}]},
 {lists,foldl,3,[{file,"lists.erl"},{line,1263}]},
 {rebar_state,create_logic_providers,2,
              [{file,"/Users/Laymer/bin/rebar3/_build/prod/lib/rebar/src/rebar_state.erl"},
               {line,411}]},
 {rebar_plugins,'-handle_plugins/4-fun-0-',4,
                [{file,"/Users/Laymer/bin/rebar3/_build/prod/lib/rebar/src/rebar_plugins.erl"},
                 {line,84}]},
 {lists,foldl,3,[{file,"lists.erl"},{line,1263}]},
 {rebar_plugins,handle_plugins,4,
                [{file,"/Users/Laymer/bin/rebar3/_build/prod/lib/rebar/src/rebar_plugins.erl"},
                 {line,82}]}]

{state_t,"/Users/Laymer/EdgeComputing/grisp-lasp/node",
    {dict,20,16,16,8,80,48,
        {[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]},
        {{[],
          [[{locks,default},
            {<<"acceptor_pool">>,
             {pkg,<<"acceptor_pool">>,<<"1.0.0-rc.0">>,
                 <<"679D741DF87FC13599B1AEF2DF8F78F1F880449A6BEFAB7C44FB6FAE0E92A2DE">>},
             1},
            {<<"epmd">>,
             {git,"https://github.com/erlang/epmd",
                 {ref,"4d1a595b9d5c32fc0e55f462da381de62de23bf0"}},
             0},
            {<<"flow">>,{elixir,<<"flow">>,<<"0.14.2">>},0},
            {<<"gen_flow">>,
             {pkg,<<"gen_flow">>,<<"0.0.5">>,
                 <<"2FF6ABE3ED1C5C9BC41F81BF09364A3F63F96E4D378D45A2A2DDC4FC06F3484A">>},
             1},
            {<<"gen_stage">>,{elixir,<<"gen_stage">>,<<"0.14.0">>},0},
            {<<"goldrush">>,
             {pkg,<<"goldrush">>,<<"0.1.9">>,
                 <<"F06E5D5F1277DA5C413E84D5A2924174182FB108DABB39D5EC548B27424CD106">>},
             1},
            {<<"lager">>,
             {git,"https://github.com/erlang-lager/lager.git",
                 {ref,"bf60290101306b3cc26544d0d181a5cff8931e82"}},
             0},
            {<<"lasp">>,
             {git,"https://github.com/lasp-lang/lasp.git",
                 {ref,"102cb1930c6c38861bcd841008d1a2ee203e56c1"}},
             0},
            {<<"lasp_support">>,
             {pkg,<<"lasp_support">>,<<"0.0.3">>,
                 <<"C1B7E1A472037AE82C71D2D16A10B7D644A621B66AE5AFE834CECF170F2E9169">>},
             1},
            {<<"numerix">>,{elixir,<<"numerix">>,<<"0.5.1">>},0},
            {<<"plumtree">>,
             {pkg,<<"plumtree">>,<<"0.5.0">>,
                 <<"F3521CE631AD22AC00635E79C7F046A163BD1135889CDC1D0B18AB577F76EC70">>},
             1},
            {<<"quickrand">>,
             {pkg,<<"quickrand">>,<<"1.7.4-rc1">>,
                 <<"61A9AF693C8B4FC9F838818493BCEE127AA2EE70483BE32BAD20C760C208E8BA">>},
             2},
            {<<"rand_compat">>,
             {pkg,<<"rand_compat">>,<<"0.0.3">>,
                 <<"011646BC1F0B0C432FE101B816F25B9BBB74A085713CEE1DAFD2D62E9415EAD3">>},
             1},
            {<<"recon">>,
             {git,"https://github.com/ferd/recon.git",
                 {ref,"794849210f40f37111f4502ec2f39b176dda4ebf"}},
             0},
            {<<"time_compat">>,
             {pkg,<<"time_compat">>,<<"0.0.1">>,
                 <<"23FE0AD1FDF3B5B88821B2D04B4B5E865BF587AE66056D671FE0F53514ED8139">>},
             1},
            {<<"types">>,
             {pkg,<<"types">>,<<"0.1.8">>,
                 <<"5782B67231E8C174FE2835395E71E669FE0121076779D2A09F1C0D58EE0E2F13">>},
             1},
            {<<"uuid">>,
             {pkg,<<"uuid_erl">>,<<"1.7.3">>,
                 <<"C5DF97D1A3D626235C2415E74053C47B2138BB863C5CD802AB5CAECB8ECC019F">>},
             1}],
           [{deps,default},
            {<<"epmd">>,{git,"https://github.com/erlang/epmd",{ref,"4d1a59"}}},
            {<<"recon">>,
             {git,"https://github.com/ferd/recon.git",{branch,"master"}}},
            {<<"lasp">>,
             {git,"https://github.com/lasp-lang/lasp.git",{branch,"master"}}},
            <<"partisan">>,
            {<<"lager">>,
             {git,"https://github.com/erlang-lager/lager.git",
                 {branch,"master"}}},
            {<<"flow">>,{elixir,"flow","0.14.2"}},
            {<<"gen_stage">>,{elixir,"gen_stage","0.14.0"}},
            {<<"numerix">>,{elixir,"numerix","0.5.1"}},
            {<<"epmd">>,
             {git,"https://github.com/erlang/epmd",
                 {ref,"4d1a595b9d5c32fc0e55f462da381de62de23bf0"}},
             0},
            {<<"flow">>,{elixir,<<"flow">>,<<"0.14.2">>},0},
            {<<"gen_stage">>,{elixir,<<"gen_stage">>,<<"0.14.0">>},0},
            {<<"lager">>,
             {git,"https://github.com/erlang-lager/lager.git",
                 {ref,"bf60290101306b3cc26544d0d181a5cff8931e82"}},
             0},
            {<<"lasp">>,
             {git,"https://github.com/lasp-lang/lasp.git",
                 {ref,"102cb1930c6c38861bcd841008d1a2ee203e56c1"}},
             0},
            {<<"numerix">>,{elixir,<<"numerix">>,<<"0.5.1">>},0},
            {<<"recon">>,
             {git,"https://github.com/ferd/recon.git",
                 {ref,"794849210f40f37111f4502ec2f39b176dda4ebf"}},
             0}],
           [{project_plugins,default}],
           [{plugins,default},
            {rebar3_elixir_compile,".*",
                {git,
                    "https://github.com/GrispLasp/rebar3_elixir_compile.git",
                    {branch,"master"}}}]],
          [[caller|command_line],
           [base_dir,47,85,115,101,114,115,47,76,97,121,109,101,114,47,69,100,
            103,101,67,111,109,112,117,116,105,110,103,47,103,114,105,115,112,
            45,108,97,115,112,47,110,111,100,101,47,95,98,117,105,108,100],
           [deps_dir,112,108,117,103,105,110,115]],
          [[deps,
            {epmd,{git,"https://github.com/erlang/epmd",{ref,"4d1a59"}}},
            {recon,
                {git,"https://github.com/ferd/recon.git",{branch,"master"}}},
            {lasp,
                {git,"https://github.com/lasp-lang/lasp.git",
                    {branch,"master"}}},
            partisan,
            {lager,
                {git,"https://github.com/erlang-lager/lager.git",
                    {branch,"master"}}},
            {flow,{elixir,"flow","0.14.2"}},
            {gen_stage,{elixir,"gen_stage","0.14.0"}},
            {numerix,{elixir,"numerix","0.5.1"}}],
           [plugins,
            {rebar3_elixir_compile,".*",
                {git,
                    "https://github.com/GrispLasp/rebar3_elixir_compile.git",
                    {branch,"master"}}}],
           [provider_hooks,{pre,[{compile,{ex,compile}}]}],
           [erl_opts,debug_info,verbose],
           [profiles,
            {test,
                [{extra_src_dirs,["test"]},
                 {erl_opts,[{d,'TEST'},debug_info,no_warn_unused_vars]},
                 {provider_hooks,[{pre,[{compile,{ex,compile}}]}]},
                 {relx,
                     [{dev_mode,true},
                      {include_erts,false},
                      {release,
                          {node,"0.1.0"},
                          [sasl,runtime_tools,{epmd,none},{lasp,load},node]},
                      {sys_config,"config/test.config"},
                      {extended_start_script,true}]},
                 {shell,[{apps,[]},{config,"config/test.config"}]}]},
            {deployg,
                [{deps,[grisp]},
                 {provider_hooks,[{pre,[{release,{ex,compile}}]}]},
                 {erl_opts,[debug_info,{parse_transform,lager_transform}]},
                 {grisp,
                     [{otp,[{version,"21.0"}]},
                      {toolchain,
                          [{root,
                               "/Users/Laymer/GRiSP/grisp-software/rtems-install/rtems/5"}]},
                      {build,
                          [{toolchain,
                               [{directory,
                                    "/Users/Laymer/GRiSP/grisp-software/rtems-install/rtems/5"}]}]},
                      {deploy,
                          [{pre_script,"rm -rdf /Volumes/GRISP/*"},
                           {destination,"/Volumes/GRISP"},
                           {post_script,"diskutil unmount /Volumes/GRISP"}]}]},
                 {shell,[{apps,[]},{config,"config/sys.config"}]},
                 {elixir_opts,[{env,dev}]},
                 {relx,
                     [{dev_mode,false},
                      {include_erts,true},
                      {release,
                          {node,"0.1.0"},
                          [sasl,runtime_tools,
                           {recon,load},
                           {epmd,none},
                           {lasp,load},
                           {flow,load},
                           {gen_stage,load},
                           {numerix,load},
                           node]},
                      {sys_config,"config/sys.config"},
                      {extended_start_script,true}]}]},
            {prod,
                [{deps,[grisp]},
                 {provider_hooks,[{pre,[{release,{ex,compile}}]}]},
                 {erl_opts,[no_debug_info,warnings_as_errors]},
                 {grisp,
                     [{otp,[{version,"21.0"}]},
                      {toolchain,
                          [{root,
                               "/Users/Laymer/GRiSP/grisp-software/rtems-install/rtems/5"}]},
                      {build,
                          [{toolchain,
                               [{directory,
                                    "/Users/Laymer/GRiSP/grisp-software/rtems-install/rtems/5"}]}]},
                      {deploy,
                          [{pre_script,"rm -rdf /Volumes/GRISP/*"},
                           {destination,"/Volumes/GRISP"},
                           {post_script,"diskutil unmount /Volumes/GRISP"}]}]},
                 {shell,[{apps,[]},{config,"config/prod.config"}]},
                 {relx,
                     [{dev_mode,false},
                      {include_erts,true},
                      {release,
                          {node,"0.1.0"},
                          [sasl,runtime_tools,
                           {recon,load},
                           {epmd,none},
                           {lasp,load},
                           {flow,load},
                           {gen_stage,load},
                           {numerix,load},
                           node]},
                      {sys_config,"config/prod.config"},
                      {extended_start_script,true}]}]},
            {native,[{erl_opts,[{native,o3}]}]}],
           [defines],
           [overrides]],
          [],
          [[vsn_cache|
            {dict,0,16,16,8,80,48,
                {[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]},
                {{[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]}}}],
           [force,48]],
          [],[],
          [[relx,
            {release,
                {node,"0.1.0"},
                [sasl,runtime_tools,
                 {recon,load},
                 {epmd,none},
                 {lasp,load},
                 {flow,load},
                 {gen_stage,load},
                 {numerix,load},
                 node]},
            {sys_config,"config/test.config"},
            {extended_start_script,true}]],
          [[{plugins,global},rebar3_hex,rebar3_grisp]],
          [],
          [[task,104,101,108,112]],
          [[shell,{apps,[]},{config,"config/test.config"}]],
          [],[],[]}}},
    {dict,1,16,16,8,80,48,
        {[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]},
        {{[],[],[],
          [[all_plugin_deps,
            "/Users/Laymer/EdgeComputing/grisp-lasp/node/_build/default/plugins/rebar3_elixir_compile/ebin"]],
          [],[],[],[],[],[],[],[],[],[],[],[]}}},
    {dict,12,16,16,8,80,48,
        {[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]},
        {{[],
          [[{locks,default},
            {<<"acceptor_pool">>,
             {pkg,<<"acceptor_pool">>,<<"1.0.0-rc.0">>,
                 <<"679D741DF87FC13599B1AEF2DF8F78F1F880449A6BEFAB7C44FB6FAE0E92A2DE">>},
             1},
            {<<"epmd">>,
             {git,"https://github.com/erlang/epmd",
                 {ref,"4d1a595b9d5c32fc0e55f462da381de62de23bf0"}},
             0},
            {<<"flow">>,{elixir,<<"flow">>,<<"0.14.2">>},0},
            {<<"gen_flow">>,
             {pkg,<<"gen_flow">>,<<"0.0.5">>,
                 <<"2FF6ABE3ED1C5C9BC41F81BF09364A3F63F96E4D378D45A2A2DDC4FC06F3484A">>},
             1},
            {<<"gen_stage">>,{elixir,<<"gen_stage">>,<<"0.14.0">>},0},
            {<<"goldrush">>,
             {pkg,<<"goldrush">>,<<"0.1.9">>,
                 <<"F06E5D5F1277DA5C413E84D5A2924174182FB108DABB39D5EC548B27424CD106">>},
             1},
            {<<"lager">>,
             {git,"https://github.com/erlang-lager/lager.git",
                 {ref,"bf60290101306b3cc26544d0d181a5cff8931e82"}},
             0},
            {<<"lasp">>,
             {git,"https://github.com/lasp-lang/lasp.git",
                 {ref,"102cb1930c6c38861bcd841008d1a2ee203e56c1"}},
             0},
            {<<"lasp_support">>,
             {pkg,<<"lasp_support">>,<<"0.0.3">>,
                 <<"C1B7E1A472037AE82C71D2D16A10B7D644A621B66AE5AFE834CECF170F2E9169">>},
             1},
            {<<"numerix">>,{elixir,<<"numerix">>,<<"0.5.1">>},0},
            {<<"plumtree">>,
             {pkg,<<"plumtree">>,<<"0.5.0">>,
                 <<"F3521CE631AD22AC00635E79C7F046A163BD1135889CDC1D0B18AB577F76EC70">>},
             1},
            {<<"quickrand">>,
             {pkg,<<"quickrand">>,<<"1.7.4-rc1">>,
                 <<"61A9AF693C8B4FC9F838818493BCEE127AA2EE70483BE32BAD20C760C208E8BA">>},
             2},
            {<<"rand_compat">>,
             {pkg,<<"rand_compat">>,<<"0.0.3">>,
                 <<"011646BC1F0B0C432FE101B816F25B9BBB74A085713CEE1DAFD2D62E9415EAD3">>},
             1},
            {<<"recon">>,
             {git,"https://github.com/ferd/recon.git",
                 {ref,"794849210f40f37111f4502ec2f39b176dda4ebf"}},
             0},
            {<<"time_compat">>,
             {pkg,<<"time_compat">>,<<"0.0.1">>,
                 <<"23FE0AD1FDF3B5B88821B2D04B4B5E865BF587AE66056D671FE0F53514ED8139">>},
             1},
            {<<"types">>,
             {pkg,<<"types">>,<<"0.1.8">>,
                 <<"5782B67231E8C174FE2835395E71E669FE0121076779D2A09F1C0D58EE0E2F13">>},
             1},
            {<<"uuid">>,
             {pkg,<<"uuid_erl">>,<<"1.7.3">>,
                 <<"C5DF97D1A3D626235C2415E74053C47B2138BB863C5CD802AB5CAECB8ECC019F">>},
             1}],
           [{deps,default},
            {<<"epmd">>,{git,"https://github.com/erlang/epmd",{ref,"4d1a59"}}},
            {<<"recon">>,
             {git,"https://github.com/ferd/recon.git",{branch,"master"}}},
            {<<"lasp">>,
             {git,"https://github.com/lasp-lang/lasp.git",{branch,"master"}}},
            <<"partisan">>,
            {<<"lager">>,
             {git,"https://github.com/erlang-lager/lager.git",
                 {branch,"master"}}},
            {<<"flow">>,{elixir,"flow","0.14.2"}},
            {<<"gen_stage">>,{elixir,"gen_stage","0.14.0"}},
            {<<"numerix">>,{elixir,"numerix","0.5.1"}},
            {<<"epmd">>,
             {git,"https://github.com/erlang/epmd",
                 {ref,"4d1a595b9d5c32fc0e55f462da381de62de23bf0"}},
             0},
            {<<"flow">>,{elixir,<<"flow">>,<<"0.14.2">>},0},
            {<<"gen_stage">>,{elixir,<<"gen_stage">>,<<"0.14.0">>},0},
            {<<"lager">>,
             {git,"https://github.com/erlang-lager/lager.git",
                 {ref,"bf60290101306b3cc26544d0d181a5cff8931e82"}},
             0},
            {<<"lasp">>,
             {git,"https://github.com/lasp-lang/lasp.git",
                 {ref,"102cb1930c6c38861bcd841008d1a2ee203e56c1"}},
             0},
            {<<"numerix">>,{elixir,<<"numerix">>,<<"0.5.1">>},0},
            {<<"recon">>,
             {git,"https://github.com/ferd/recon.git",
                 {ref,"794849210f40f37111f4502ec2f39b176dda4ebf"}},
             0}],
           [{project_plugins,default}],
           [{plugins,default},
            {rebar3_elixir_compile,".*",
                {git,
                    "https://github.com/GrispLasp/rebar3_elixir_compile.git",
                    {branch,"master"}}}]],
          [],
          [[deps,
            {epmd,{git,"https://github.com/erlang/epmd",{ref,"4d1a59"}}},
            {recon,
                {git,"https://github.com/ferd/recon.git",{branch,"master"}}},
            {lasp,
                {git,"https://github.com/lasp-lang/lasp.git",
                    {branch,"master"}}},
            partisan,
            {lager,
                {git,"https://github.com/erlang-lager/lager.git",
                    {branch,"master"}}},
            {flow,{elixir,"flow","0.14.2"}},
            {gen_stage,{elixir,"gen_stage","0.14.0"}},
            {numerix,{elixir,"numerix","0.5.1"}}],
           [plugins,
            {rebar3_elixir_compile,".*",
                {git,
                    "https://github.com/GrispLasp/rebar3_elixir_compile.git",
                    {branch,"master"}}}],
           [provider_hooks,{pre,[{compile,{ex,compile}}]}],
           [erl_opts,debug_info,verbose],
           [profiles,
            {deployg,
                [{deps,[grisp]},
                 {provider_hooks,[{pre,[{release,{ex,compile}}]}]},
                 {erl_opts,[debug_info,{parse_transform,lager_transform}]},
                 {grisp,
                     [{otp,[{version,"21.0"}]},
                      {toolchain,
                          [{root,
                               "/Users/Laymer/GRiSP/grisp-software/rtems-install/rtems/5"}]},
                      {build,
                          [{toolchain,
                               [{directory,
                                    "/Users/Laymer/GRiSP/grisp-software/rtems-install/rtems/5"}]}]},
                      {deploy,
                          [{pre_script,"rm -rdf /Volumes/GRISP/*"},
                           {destination,"/Volumes/GRISP"},
                           {post_script,"diskutil unmount /Volumes/GRISP"}]}]},
                 {shell,[{apps,[]},{config,"config/sys.config"}]},
                 {elixir_opts,[{env,dev}]},
                 {relx,
                     [{dev_mode,false},
                      {include_erts,true},
                      {release,
                          {node,"0.1.0"},
                          [sasl,runtime_tools,
                           {recon,load},
                           {epmd,none},
                           {lasp,load},
                           {flow,load},
                           {gen_stage,load},
                           {numerix,load},
                           node]},
                      {sys_config,"config/sys.config"},
                      {extended_start_script,true}]}]},
            {prod,
                [{deps,[grisp]},
                 {provider_hooks,[{pre,[{release,{ex,compile}}]}]},
                 {erl_opts,[no_debug_info,warnings_as_errors]},
                 {grisp,
                     [{otp,[{version,"21.0"}]},
                      {toolchain,
                          [{root,
                               "/Users/Laymer/GRiSP/grisp-software/rtems-install/rtems/5"}]},
                      {build,
                          [{toolchain,
                               [{directory,
                                    "/Users/Laymer/GRiSP/grisp-software/rtems-install/rtems/5"}]}]},
                      {deploy,
                          [{pre_script,"rm -rdf /Volumes/GRISP/*"},
                           {destination,"/Volumes/GRISP"},
                           {post_script,"diskutil unmount /Volumes/GRISP"}]}]},
                 {shell,[{apps,[]},{config,"config/prod.config"}]},
                 {relx,
                     [{dev_mode,false},
                      {include_erts,true},
                      {release,
                          {node,"0.1.0"},
                          [sasl,runtime_tools,
                           {recon,load},
                           {epmd,none},
                           {lasp,load},
                           {flow,load},
                           {gen_stage,load},
                           {numerix,load},
                           node]},
                      {sys_config,"config/prod.config"},
                      {extended_start_script,true}]}]},
            {test,
                [{provider_hooks,[{pre,[{compile,{ex,compile}}]}]},
                 {erl_opts,[debug_info,no_warn_unused_vars]},
                 {shell,[{apps,[]},{config,"config/test.config"}]},
                 {relx,
                     [{dev_mode,true},
                      {include_erts,false},
                      {release,
                          {node,"0.1.0"},
                          [sasl,runtime_tools,{epmd,none},{lasp,load},node]},
                      {sys_config,"config/test.config"},
                      {extended_start_script,true}]}]},
            {native,[{erl_opts,[{native,o3}]}]}]],
          [],[],[],[],
          [[relx,
            {release,
                {node,"0.1.0"},
                [sasl,runtime_tools,
                 {recon,load},
                 {epmd,none},
                 {lasp,load},
                 {flow,load},
                 {gen_stage,load},
                 {numerix,load},
                 node]},
            {sys_config,"config/test.config"},
            {extended_start_script,true}]],
          [[{plugins,global},rebar3_hex,rebar3_grisp]],
          [],[],
          [[shell,{apps,[]},{config,"config/test.config"}]],
          [],[],[]}}},
    undefined,
    [{app_info_t,<<"rebar3_elixir_compile">>,
         "/Users/Laymer/EdgeComputing/grisp-lasp/node/_build/default/plugins/rebar3_elixir_compile/src/rebar3_elixir_compile.app.src",
         undefined,
         "/Users/Laymer/EdgeComputing/grisp-lasp/node/_build/default/plugins/rebar3_elixir_compile/ebin/rebar3_elixir_compile.app",
         "1.0.0",root,
         [{description,"A rebar3 elixir compiler plugin"},
          {vsn,"1.0.0"},
          {registered,[]},
          {applications,[kernel,stdlib,crypto,elixir]},
          {env,[]},
          {modules,
              [rebar3_elixir_compile,rebar3_elixir_compile_prv_ex_compiler,
               rebar3_elixir_compile_resource,rebar3_elixir_compile_util]},
          {maintainers,["Sushruth Sivaramakrishnan"]},
          {licenses,["Apache"]},
          {links,[{"Github","https://github.com/barrel-db/rebar3_elixir"}]}],
         [kernel,stdlib,crypto,elixir],
         [],
         [default],
         {dict,5,16,16,8,80,48,
             {[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]},
             {{[],
               [[{deps,default}],[{plugins,default}]],
               [],
               [[erl_opts,debug_info],
                [project_plugins,rebar3_hex],
                [overrides]],
               [],[],[],[],[],[],[],[],[],[],[],[]}}},
         {dict,5,16,16,8,80,48,
             {[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]},
             {{[],
               [[{deps,default}],[{plugins,default}]],
               [],
               [[erl_opts,debug_info],
                [project_plugins,rebar3_hex],
                [overrides]],
               [],[],[],[],[],[],[],[],[],[],[],[]}}},
         0,
         "/Users/Laymer/EdgeComputing/grisp-lasp/node/_build/default/plugins/rebar3_elixir_compile",
         "/Users/Laymer/EdgeComputing/grisp-lasp/node/_build/default/plugins/rebar3_elixir_compile",
         undefined,
         {git,"https://github.com/GrispLasp/rebar3_elixir_compile.git",
             {branch,"master"}},
         false,false,true}],
    [default],
    default,[],
    {[],[]},
    undefined,[],[],
    [{app_info_t,<<"rebar3_elixir_compile">>,
         "/Users/Laymer/EdgeComputing/grisp-lasp/node/_build/default/plugins/rebar3_elixir_compile/src/rebar3_elixir_compile.app.src",
         undefined,
         "/Users/Laymer/EdgeComputing/grisp-lasp/node/_build/default/plugins/rebar3_elixir_compile/ebin/rebar3_elixir_compile.app",
         "1.0.0",root,
         [{description,"A rebar3 elixir compiler plugin"},
          {vsn,"1.0.0"},
          {registered,[]},
          {applications,[kernel,stdlib,crypto,elixir]},
          {env,[]},
          {modules,
              [rebar3_elixir_compile,rebar3_elixir_compile_prv_ex_compiler,
               rebar3_elixir_compile_resource,rebar3_elixir_compile_util]},
          {maintainers,["Sushruth Sivaramakrishnan"]},
          {licenses,["Apache"]},
          {links,[{"Github","https://github.com/barrel-db/rebar3_elixir"}]}],
         [kernel,stdlib,crypto,elixir],
         [],
         [default,prod],
         {dict,5,16,16,8,80,48,
             {[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]},
             {{[],
               [[{deps,default}],[{plugins,default}]],
               [],
               [[erl_opts,debug_info],
                [project_plugins,rebar3_hex],
                [overrides]],
               [],[],[],[],[],[],[],[],[],[],[],[]}}},
         {dict,5,16,16,8,80,48,
             {[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]},
             {{[],
               [[{deps,default}],[{plugins,default}]],
               [],
               [[erl_opts,debug_info],
                [project_plugins,rebar3_hex],
                [overrides]],
               [],[],[],[],[],[],[],[],[],[],[],[]}}},
         0,
         "/Users/Laymer/EdgeComputing/grisp-lasp/node/_build/default/plugins/rebar3_elixir_compile",
         "/Users/Laymer/EdgeComputing/grisp-lasp/node/_build/default/plugins/rebar3_elixir_compile",
         undefined,
         {git,"https://github.com/GrispLasp/rebar3_elixir_compile.git",
             {branch,"master"}},
         false,false,true}],
    [],
    [{git,rebar_git_resource},{pkg,rebar_pkg_resource},{hg,rebar_hg_resource}],
    [{provider,xref,rebar_prv_xref,
         {[],[]},
         true,
         [compile],
         ["Run cross reference analysis.",10,10,86,97,108,105,100,32,114,101,
          98,97,114,46,99,111,110,102,105,103,32,111,112,116,105,111,110,115,
          58,10,32,32,
          [123,["xref_warnings",44,"false"],125],
          10,32,32,
          [123,["xref_extra_paths",44,"[]"],125],
          10,32,32,
          [123,
           ["xref_checks",44,
            [91,
             ["undefined_function_calls",44,"undefined_functions",44,
              "locals_not_used",44,10,
              [32,[32,["   ",32,32,32],"   ",32,32,32],32,32],
              "exports_not_used",44,"deprecated_function_calls",44,10,
              [32,[32,["   ",32,32,32],"   ",32,32,32],32,32],
              "deprecated_functions"],
             93]],
           125],
          10,32,32,
          [123,
           ["xref_queries",44,
            [91,
             [[123,
               ["\"(xc - uc) || (xu - x - b - (\\\"mod\\\":\\\".*foo\\\"/\\\"4\\\"))\"",
                44,10,
                [32,32,[[32,"   ",32,32,32],32,"   ",32,32,32],32,32],
                "[]"],
               125]],
             93]],
           125],
          10],
         "Run cross reference analysis.","rebar3 xref",[],
         [default],
         default},
     {provider,version,rebar_prv_version,
         {[],[]},
         true,[],"Print version for rebar and current Erlang.",
         "Print version for rebar and current Erlang.","rebar3 version",[],
         [default],
         default},
     {provider,upgrade,rebar_prv_upgrade,
         {[],[]},
         true,
         [lock],
         "Upgrade project dependencies. Mentioning no application will upgrade all dependencies. To upgrade specific dependencies, their names can be listed in the command.",
         "Upgrade dependencies.","rebar3 upgrade [cowboy[,ranch]]",
         [{package,undefined,undefined,string,
              "List of packages to upgrade. If not specified, all dependencies are upgraded."}],
         [default],
         default},
     {provider,update,rebar_prv_update,
         {[],[]},
         true,[],"Update package index.","Update package index.",
         "rebar3 update",[],
         [default],
         default},
     {provider,unlock,rebar_prv_unlock,
         {[],[]},
         true,[],
         "Unlock project dependencies. Mentioning no application will unlock all dependencies. To unlock specific dependencies, their name can be listed in the command.",
         "Unlock dependencies.",[],
         [{package,undefined,undefined,string,
              "List of packages to unlock. If not specified, all dependencies are unlocked."}],
         [default],
         default},
     {provider,tar,rebar_prv_tar,
         {[],[]},
         true,
         [release],
         "Tar archive of release built of project.",
         "Tar archive of release built of project.","rebar3 tar",
         [{relname,110,"relname",string,
              "Specify the name for the release that will be generated"},
          {relvsn,118,"relvsn",string,"Specify the version for the release"},
          {goal,103,"goal",string,
              "Specify a target constraint on the system. These are usually the OTP"},
          {upfrom,117,"upfrom",string,
              "Only valid with relup target, specify the release to upgrade from"},
          {output_dir,111,"output-dir",string,
              "The output directory for the release. This is `./` by default."},
          {help,104,"help",undefined,"Print usage"},
          {lib_dir,108,"lib-dir",string,
              "Additional dir that should be searched for OTP Apps"},
          {path,112,"path",string,"Additional dir to add to the code path"},
          {default_libs,undefined,"default-libs",boolean,
              "Whether to use the default system added lib dirs (means you must add them all manually). Default is true"},
          {log_level,86,"verbose",
              {integer,2},
              "Verbosity level, maybe between 0 and 3"},
          {dev_mode,100,"dev-mode",boolean,
              "Symlink the applications and configuration into the release instead of copying"},
          {include_erts,105,"include-erts",string,
              "If true include a copy of erts used to build with, if a path include erts at that path. If false, do not include erts"},
          {override,97,"override",string,
              "Provide an app name and a directory to override in the form <appname>:<app directory>"},
          {config,99,"config",{string,[]},"The path to a config file"},
          {overlay_vars,undefined,"overlay_vars",string,
              "Path to a file of overlay variables"},
          {vm_args,undefined,"vm_args",string,
              "Path to a file to use for vm.args"},
          {sys_config,undefined,"sys_config",string,
              "Path to a file to use for sys.config"},
          {system_libs,undefined,"system_libs",string,
              "Path to dir of Erlang system libs"},
          {version,undefined,"version",undefined,"Print relx version"},
          {root_dir,114,"root",string,"The project root directory"}],
         [default],
         default},
     {provider,state,rebar_prv_state,
         {[],[]},
         false,[],"Display rebar configuration for debugging purpose",
         "Print current configuration state","rebar3 state",[],
         [default],
         default},
     {provider,shell,rebar_prv_shell,
         {[],[]},
         true,
         [compile],
         "Start a shell with project and deps preloaded similar to~n'erl -pa ebin -pa deps/*/ebin'.~n",
         "Run shell with project apps and deps in path.","rebar3 shell",
         [{config,undefined,"config",string,
              "Path to the config file to use. Defaults to {shell, [{config, File}]} and then the relx sys.config file if not specified."},
          {name,undefined,"name",atom,"Gives a long name to the node."},
          {sname,undefined,"sname",atom,"Gives a short name to the node."},
          {setcookie,undefined,"setcookie",atom,
              "Sets the cookie if the node is distributed."},
          {script_file,undefined,"script",string,
              "Path to an escript file to run before starting the project apps. Defaults to rebar.config {shell, [{script_file, File}]} if not specified."},
          {apps,undefined,"apps",string,
              "A list of apps to boot before starting the shell. (E.g. --apps app1,app2,app3) Defaults to rebar.config {shell, [{apps, Apps}]} or relx apps if not specified."},
          {start_clean,undefined,"start-clean",boolean,
              "Cancel any applications in the 'apps' list or release."},
          {user_drv_args,undefined,"user_drv_args",string,
              "Arguments passed to user_drv start function for creating custom shells."}],
         [default],
         default},
     {provider,report,rebar_prv_report,
         {[],[]},
         true,[],
         "Provide a crash report to be sent to the rebar3 issues page.",
         "Provide a crash report to be sent to the rebar3 issues page.",
         "rebar3 report \"<task>\"",
         [{task,undefined,undefined,string,"Task to print details for."}],
         [default],
         default},
     {provider,relup,rebar_prv_relup,
         {[],[]},
         true,
         [release],
         "Create relup of releases.","Create relup of releases.",
         "rebar3 relup",
         [{relname,110,"relname",string,
              "Specify the name for the release that will be generated"},
          {relvsn,118,"relvsn",string,"Specify the version for the release"},
          {goal,103,"goal",string,
              "Specify a target constraint on the system. These are usually the OTP"},
          {upfrom,117,"upfrom",string,
              "Only valid with relup target, specify the release to upgrade from"},
          {output_dir,111,"output-dir",string,
              "The output directory for the release. This is `./` by default."},
          {help,104,"help",undefined,"Print usage"},
          {lib_dir,108,"lib-dir",string,
              "Additional dir that should be searched for OTP Apps"},
          {path,112,"path",string,"Additional dir to add to the code path"},
          {default_libs,undefined,"default-libs",boolean,
              "Whether to use the default system added lib dirs (means you must add them all manually). Default is true"},
          {log_level,86,"verbose",
              {integer,2},
              "Verbosity level, maybe between 0 and 3"},
          {dev_mode,100,"dev-mode",boolean,
              "Symlink the applications and configuration into the release instead of copying"},
          {include_erts,105,"include-erts",string,
              "If true include a copy of erts used to build with, if a path include erts at that path. If false, do not include erts"},
          {override,97,"override",string,
              "Provide an app name and a directory to override in the form <appname>:<app directory>"},
          {config,99,"config",{string,[]},"The path to a config file"},
          {overlay_vars,undefined,"overlay_vars",string,
              "Path to a file of overlay variables"},
          {vm_args,undefined,"vm_args",string,
              "Path to a file to use for vm.args"},
          {sys_config,undefined,"sys_config",string,
              "Path to a file to use for sys.config"},
          {system_libs,undefined,"system_libs",string,
              "Path to dir of Erlang system libs"},
          {version,undefined,"version",undefined,"Print relx version"},
          {root_dir,114,"root",string,"The project root directory"}],
         [default],
         default},
     {provider,release,rebar_prv_release,
         {[],[]},
         true,
         [compile],
         "Build release of project.","Build release of project.",
         "rebar3 release",
         [{relname,110,"relname",string,
              "Specify the name for the release that will be generated"},
          {relvsn,118,"relvsn",string,"Specify the version for the release"},
          {goal,103,"goal",string,
              "Specify a target constraint on the system. These are usually the OTP"},
          {upfrom,117,"upfrom",string,
              "Only valid with relup target, specify the release to upgrade from"},
          {output_dir,111,"output-dir",string,
              "The output directory for the release. This is `./` by default."},
          {help,104,"help",undefined,"Print usage"},
          {lib_dir,108,"lib-dir",string,
              "Additional dir that should be searched for OTP Apps"},
          {path,112,"path",string,"Additional dir to add to the code path"},
          {default_libs,undefined,"default-libs",boolean,
              "Whether to use the default system added lib dirs (means you must add them all manually). Default is true"},
          {log_level,86,"verbose",
              {integer,2},
              "Verbosity level, maybe between 0 and 3"},
          {dev_mode,100,"dev-mode",boolean,
              "Symlink the applications and configuration into the release instead of copying"},
          {include_erts,105,"include-erts",string,
              "If true include a copy of erts used to build with, if a path include erts at that path. If false, do not include erts"},
          {override,97,"override",string,
              "Provide an app name and a directory to override in the form <appname>:<app directory>"},
          {config,99,"config",{string,[]},"The path to a config file"},
          {overlay_vars,undefined,"overlay_vars",string,
              "Path to a file of overlay variables"},
          {vm_args,undefined,"vm_args",string,
              "Path to a file to use for vm.args"},
          {sys_config,undefined,"sys_config",string,
              "Path to a file to use for sys.config"},
          {system_libs,undefined,"system_libs",string,
              "Path to dir of Erlang system libs"},
          {version,undefined,"version",undefined,"Print relx version"},
          {root_dir,114,"root",string,"The project root directory"}],
         [default],
         default},
     {provider,upgrade,rebar_prv_plugins_upgrade,
         {[],[]},
         true,[],"List or upgrade plugins","Upgrade plugins",
         "rebar3 plugins upgrade <plugin>",
         [{plugin,undefined,undefined,string,"Plugin to upgrade"}],
         [default],
         plugins},
     {provider,list,rebar_prv_plugins,
         {[],[]},
         true,[],"List local and global plugins for this project",
         "List local and global plugins for this project",
         "rebar3 plugins list",[],
         [default],
         plugins},
     {provider,path,rebar_prv_path,
         {[],[]},
         true,
         [app_discovery],
         "Print paths to build dirs in current profile.",
         "Print paths to build dirs in current profile.","rebar3 path",
         [{app,undefined,"app",string,
              "Comma separated list of applications to return paths for."},
          {base,undefined,"base",boolean,
              "Return the `base' path of the current profile."},
          {bin,undefined,"bin",boolean,
              "Return the `bin' path of the current profile."},
          {ebin,undefined,"ebin",boolean,
              "Return all `ebin' paths of the current profile's applications."},
          {lib,undefined,"lib",boolean,
              "Return the `lib' path of the current profile."},
          {priv,undefined,"priv",boolean,
              "Return the `priv' path of the current profile's applications."},
          {separator,115,"separator",string,
              "In case of multiple return paths, the separator character to use to join them."},
          {src,undefined,"src",boolean,
              "Return the `src' path of the current profile's applications."},
          {rel,undefined,"rel",boolean,
              "Return the `rel' path of the current profile."}],
         [default],
         default},
     {provider,pkgs,rebar_prv_packages,
         {[],[]},
         true,[],
         ["List available packages",46,10],
         "List available packages.","rebar3 pkgs",[],
         [default],
         default},
     {provider,new,rebar_prv_new,
         {[],[]},
         true,[],
         "Create rebar3 project based on template and vars.\n\nValid command line options:\n  <template> [var=foo,...]\n",
         "Create new project from templates.","rebar3 new <template>",
         [{force,102,"force",undefined,"overwrite existing files"}],
         [default],
         default},
     {provider,lock,rebar_prv_lock,
         {[],[]},
         false,
         [install_deps],
         "Locks dependencies","Locks dependencies.",[],[],
         [default],
         default},
     {provider,upgrade,rebar_prv_local_upgrade,
         {[],[]},
         true,[],[],"Download latest rebar3 escript and extract.",
         "rebar3 unstable upgrade",[],
         [default],
         local},
     {provider,install,rebar_prv_local_install,
         {[],[]},
         true,[],[],
         "Extract libs from rebar3 escript along with a run script.",
         "rebar3 unstable install",[],
         [default],
         local},
     {provider,install_deps,rebar_prv_install_deps,
         {[],[]},
         false,
         [app_discovery],
         [],[],undefined,[],
         [default],
         default},
     {provider,help,rebar_prv_help,
         {[],[]},
         true,[],
         "Display a list of tasks or help for a given task or subtask.",
         "Display a list of tasks or help for a given task or subtask.",
         "rebar3 help <task>",
         [{help_task,undefined,undefined,string,"Task to print help for."}],
         [default],
         default},
     {provider,'get-deps',rebar_prv_get_deps,
         {[],[]},
         true,
         [lock],
         "Fetch project dependencies.","Fetch dependencies.",
         "rebar3 get-deps",[],[],default},
     {provider,eunit,rebar_prv_eunit,
         {[],[]},
         true,
         [lock],
         "Run EUnit Tests.","Run EUnit Tests.","rebar3 eunit",
         [{app,undefined,"app",string,
              "Comma separated list of application test suites to run. Equivalent to `[{application, App}]`."},
          {application,undefined,"application",string,
              "Comma separated list of application test suites to run. Equivalent to `[{application, App}]`."},
          {cover,99,"cover",boolean,"Generate cover data. Defaults to false."},
          {cover_export_name,undefined,"cover_export_name",string,
              "Base name of the coverdata file to write"},
          {dir,100,"dir",string,
              "Comma separated list of dirs to load tests from. Equivalent to `[{dir, Dir}]`."},
          {file,102,"file",string,
              "Comma separated list of files to load tests from. Equivalent to `[{file, File}]`."},
          {module,109,"module",string,
              "Comma separated list of modules to load tests from. Equivalent to `[{module, Module}]`."},
          {suite,115,"suite",string,
              "Comma separated list of modules to load tests from. Equivalent to `[{module, Module}]`."},
          {verbose,118,"verbose",boolean,"Verbose output. Defaults to false."},
          {name,undefined,"name",atom,"Gives a long name to the node"},
          {sname,undefined,"sname",atom,"Gives a short name to the node"},
          {setcookie,undefined,"setcookie",atom,
              "Sets the cookie if the node is distributed"}],
         [test],
         default},
     {provider,escriptize,rebar_prv_escriptize,
         {[],[]},
         true,
         [compile],
         "Generate an escript executable containing the project's and its dependencies' BEAM files.",
         "Generate escript archive.","rebar3 escriptize",[],
         [default],
         default},
     {provider,edoc,rebar_prv_edoc,
         {[],[]},
         true,
         [compile],
         "Generate documentation using edoc.",
         "Generate documentation using edoc.","rebar3 edoc",[],
         [docs],
         default},
     {provider,do,rebar_prv_do,
         {[],[]},
         true,[],
         "Higher order provider for running multiple tasks in a sequence.",
         "Higher order provider for running multiple tasks in a sequence.",
         "rebar3 do <task1>, <task2>, ...",[],
         [default],
         default},
     {provider,dialyzer,rebar_prv_dialyzer,
         {[],[]},
         true,
         [compile],
         "Run the Dialyzer analyzer on the project.\n\nThis command will build, and keep up-to-date, a suitable PLT and will use it to carry out success typing analysis on the current project.\n\nThe following (optional) configurations can be added to a `proplist` of options `dialyzer` in rebar.config:\n`warnings` - a list of dialyzer warnings\n`get_warnings` - display warnings when altering a PLT file (boolean)\n`plt_apps` - the strategy for determining the applications which included in the PLT file, `top_level_deps` to include just the direct dependencies or `all_deps` to include all nested dependencies*\n`plt_extra_apps` - a list of extra applications to include in the PLT file\n`plt_extra_mods` - a list of extra modules to includes in the PLT file\n`plt_location` - the location of the PLT file, `local` to store in the profile's base directory (default) or a custom directory.\n`plt_prefix` - the prefix to the PLT file, defaults to \"rebar3\"**\n`base_plt_apps` - a list of applications to include in the base PLT file***\n`base_plt_mods` - a list of modules to include in the base PLT file***\n`base_plt_location` - the location of base PLT file, `global` to store in $HOME/.cache/rebar3 (default) or  a custom directory***\n`base_plt_prefix` - the prefix to the base PLT file, defaults to \"rebar3\"** ***\n`exclude_apps` - a list of applications to exclude from PLT files and success typing analysis, `plt_extra_mods` and `base_plt_mods` can add modules from excluded applications\n`exclude_mods` - a list of modules to exclude from PLT files and success typing analysis\n\nFor example, to warn on unmatched returns: \n{dialyzer, [{warnings, [unmatched_returns]}]}.\n\n*The direct dependent applications are listed in `applications` and `included_applications` of their .app files.\n**PLT files are named \"<prefix>_<otp_release>_plt\".\n***The base PLT is a PLT containing the core applications often required for a project's PLT. One base PLT is created per OTP version and stored in `base_plt_location`. A base PLT is used to build project PLTs.\n",
         "Run the Dialyzer analyzer on the project.","rebar3 dialyzer",
         [{update_plt,117,"update-plt",boolean,
              "Enable updating the PLT. Default: true"},
          {succ_typings,115,"succ-typings",boolean,
              "Enable success typing analysis. Default: true"}],
         [default],
         default},
     {provider,tree,rebar_prv_deps_tree,
         {[],[]},
         true,
         [lock],
         [],"Print dependency tree.","rebar3 tree",
         [{verbose,118,"verbose",undefined,
              "Print repo and branch/tag/ref for git and hg deps"}],
         [default],
         default},
     {provider,deps,rebar_prv_deps,
         {[],[]},
         true,
         [app_discovery],
         "List dependencies. Those not matching lock files are followed by an asterisk (*).",
         "List dependencies","rebar3 deps",[],
         [default],
         default},
     {provider,cover,rebar_prv_cover,
         {[],[]},
         true,
         [lock],
         "Perform coverage analysis.","Perform coverage analysis.",
         "rebar3 cover",
         [{reset,114,"reset",boolean,"Reset all coverdata."},
          {verbose,118,"verbose",boolean,"Print coverage analysis."},
          {min_coverage,109,"min_coverage",integer,
              "Mandate a coverage percentage required to succeed (0..100)"}],
         [test],
         default},
     {provider,compile,rebar_prv_compile,
         {[],[]},
         true,
         [lock],
         "Compile apps .app.src and .erl files.",
         "Compile apps .app.src and .erl files.","rebar3 compile",[],
         [default],
         default},
     {provider,ct,rebar_prv_common_test,
         {[],[]},
         true,
         [lock],
         "Run Common Tests.","Run Common Tests.","rebar3 ct",
         [{dir,undefined,"dir",string,
              "List of additional directories containing test suites"},
          {suite,undefined,"suite",string,"List of test suites to run"},
          {group,undefined,"group",string,"List of test groups to run"},
          {testcase,undefined,"case",string,"List of test cases to run"},
          {label,undefined,"label",string,"Test label"},
          {config,undefined,"config",string,"List of config files"},
          {spec,undefined,"spec",string,"List of test specifications"},
          {join_specs,undefined,"join_specs",boolean,
              "Merge all test specifications and perform a single test run"},
          {allow_user_terms,undefined,"allow_user_terms",boolean,
              "Allow user defined config values in config files"},
          {logdir,undefined,"logdir",string,"Log folder"},
          {logopts,undefined,"logopts",string,
              "Options for common test logging"},
          {verbosity,undefined,"verbosity",integer,"Verbosity"},
          {cover,99,"cover",{boolean,false},"Generate cover data"},
          {cover_export_name,undefined,"cover_export_name",string,
              "Base name of the coverdata file to write"},
          {repeat,undefined,"repeat",integer,"How often to repeat tests"},
          {duration,undefined,"duration",string,
              "Max runtime (format: HHMMSS)"},
          {until,undefined,"until",string,"Run until (format: HHMMSS)"},
          {force_stop,undefined,"force_stop",string,
              "Force stop on test timeout (true | false | skip_rest)"},
          {basic_html,undefined,"basic_html",boolean,"Show basic HTML"},
          {stylesheet,undefined,"stylesheet",string,
              "CSS stylesheet to apply to html output"},
          {decrypt_key,undefined,"decrypt_key",string,
              "Path to key for decrypting config"},
          {decrypt_file,undefined,"decrypt_file",string,
              "Path to file containing key for decrypting config"},
          {abort_if_missing_suites,undefined,"abort_if_missing_suites",
              {boolean,true},
              "Abort if suites are missing"},
          {multiply_timetraps,undefined,"multiply_timetraps",integer,[]},
          {scale_timetraps,undefined,"scale_timetraps",boolean,
              "Scale timetraps"},
          {create_priv_dir,undefined,"create_priv_dir",string,
              "Create priv dir (auto_per_run | auto_per_tc | manual_per_tc)"},
          {include,undefined,"include",string,
              "Directories containing additional include files"},
          {readable,undefined,"readable",string,
              "Shows test case names and only displays logs to shell on failures (true | compact | false)"},
          {verbose,118,"verbose",boolean,"Verbose output"},
          {name,undefined,"name",atom,"Gives a long name to the node"},
          {sname,undefined,"sname",atom,"Gives a short name to the node"},
          {setcookie,undefined,"setcookie",atom,
              "Sets the cookie if the node is distributed"},
          {sys_config,undefined,"sys_config",string,
              "List of application config files"},
          {compile_only,undefined,"compile_only",boolean,
              "Compile modules in the project with the test configuration but do not run the tests"},
          {retry,undefined,"retry",boolean,
              "Experimental feature. If any specification for previously failing test is found, runs them."}],
         [test],
         default},
     {provider,clean,rebar_prv_clean,
         {[],[]},
         true,
         [app_discovery,install_deps],
         "Remove compiled beam files from apps.",
         "Remove compiled beam files from apps.","rebar3 clean",
         [{all,97,"all",undefined,"Clean all apps include deps"},
          {profile,112,"profile",string,
              "Clean under profile. Equivalent to `rebar3 as <profile> clean`"}],
         [default],
         default},
     {provider,compile,rebar_prv_bare_compile,
         {[],[]},
         false,
         [{default,app_discovery}],
         [],[],[],
         [{paths,112,"paths",string,
              "Wildcard paths of ebin directories to add to code path, separated by a colon"},
          {separator,115,"separator",string,
              "In case of multiple return paths, the separator character to use to join them."}],
         [default],
         bare},
     {provider,as,rebar_prv_as,
         {[],[]},
         true,[],
         "Higher order provider for running multiple tasks in a sequence as a certain profiles.",
         "Higher order provider for running multiple tasks in a sequence as a certain profiles.",
         "rebar3 as <profile1>,<profile2>,... <task1>, <task2>, ...",
         [{profile,undefined,undefined,string,"Profiles to run as."}],
         [default],
         default},
     {provider,app_discovery,rebar_prv_app_discovery,
         {[],[]},
         false,[],[],[],[],[],
         [default],
         default},
     {provider,version,rebar3_grisp_version,
         {[],[]},
         true,[],"Print version of plug-in.\n","Print version of plug-in",
         "rebar3 grisp version",[],
         [default],
         grisp},
     {provider,build,rebar3_grisp_build,
         {[],[]},
         true,
         [{default,install_deps}],
         "Build a custom Erlang/OTP system for GRiSP.\n",
         "Build a custom Erlang/OTP system for GRiSP","rebar3 grisp build",
         [{clean,99,"clean",
              {boolean,false},
              "Completely clean Git repository before building"},
          {configure,103,"configure",
              {boolean,true},
              "Run autoconf & configure"},
          {tar,116,"tar",
              {boolean,false},
              "Create tarball with OTP installation for online repository"}],
         [default],
         grisp},
     {provider,deploy,rebar3_grisp_deploy,
         {[],[]},
         true,
         [{default,install_deps}],
         "Deploys a GRiSP application.\n\nThe command requires the release name and version to be provided.\n",
         "Deploy a GRiSP release to a destination","rebar3 grisp deploy",
         [{relname,110,"relname",string,
              "Specify the name for the release that will be deployed"},
          {relvsn,118,"relvsn",string,"Specify the version of the release"},
          {destination,100,"destination",string,
              "Path to put deployed release in"},
          {force,102,"force",{boolean,false},"Replace existing files"},
          {pre_script,undefined,"pre-script",string,
              "Shell script to run before deploying begins"},
          {post_script,undefined,"post-script",string,
              "Shell script to run after deploying has finished"}],
         [grisp],
         grisp},
     {provider,publish,rebar3_hex_pkg,
         {[],[]},
         true,
         [{default,lock}],
         [],"Publish a new version of your package and update the package",
         "rebar3 hex publish",
         [{revert,undefined,"revert",string,"Revert given version."}],
         [default],
         hex},
     {provider,search,rebar3_hex_search,
         {[],[]},
         true,[],[],"Display packages matching the given search query",
         "rebar3 hex search <term>",
         [{term,undefined,undefined,string,"Search term."}],
         [default],
         hex},
     {provider,docs,rebar3_hex_docs,
         {[],[]},
         true,
         [{default,edoc}],
         [],"Publish documentation for the current project and version",
         "rebar3 hex docs",
         [{revert,undefined,"revert",string,"Revert given version."}],
         [default],
         hex},
     {provider,owner,rebar3_hex_owner,
         {[],[]},
         true,[],[],"Add, remove or list package owners","rebar3 hex owner",
         [],
         [default],
         hex},
     {provider,info,rebar3_hex_info,
         {[],[]},
         true,[],[],"Prints hex package or system information",
         "rebar3 hex user <command>",[],
         [default],
         hex},
     {provider,key,rebar3_hex_key,
         {[],[]},
         true,[],[],"Remove or list API keys associated with your account",
         "rebar3 hex key [list | remove <key>]",[],
         [default],
         hex},
     {provider,config,rebar3_hex_config,
         {[],[]},
         true,[],[],"Read or update hex configuration file",
         "rebar3 hex config <key> [<value>]",[],
         [default],
         hex},
     {provider,cut,rebar3_hex_cut,
         {[],[]},
         true,
         [{default,lock}],
         [],"Increment version number and publish package","rebar3 hex cut",
         [{increment,105,"increment",string,
              "Type of semver increment: major, minor or patch"}],
         [default],
         hex},
     {provider,user,rebar3_hex_user,
         {[],[]},
         true,[],[],"Hex user tasks","rebar3 hex user <command>",[],
         [default],
         hex}],
    false}